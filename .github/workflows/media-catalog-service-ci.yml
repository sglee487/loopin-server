name: Media Catalog Service CI

on:
  push:
    branches: [ '**' ]
    paths: [ 'media-catalog-service/**' ]
  pull_request:
    paths: [ 'media-catalog-service/**' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OWNER: sglee487
  IMAGE_NAME: loopin-server/media-catalog-service
  VERSION: ${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-22.04
    defaults: { run: { working-directory: media-catalog-service } }
    permissions:
      contents: read
      packages: write       # GHCR push
      security-events: write

    steps:
      # ──────────────────────────────────────────────────────────────────
      # 1) 소스 빌드 + 테스트 + SARIF 업로드
      # ──────────────────────────────────────────────────────────────────
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Unit & integration tests
        run: |
          chmod +x gradlew
          ./gradlew build

      - name: Source scan (Anchore / Grype)
        uses: anchore/scan-action@v3
        id: src-scan
        with:
          path: .
          fail-build: false
          severity-cutoff: high

      - name: Upload SARIF (src)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.src-scan.outputs.sarif }}
          category: anchore-src           # ← 충돌 방지를 위해 category 지정

      # ──────────────────────────────────────────────────────────────────
      # 2) main 브랜치 push 일 때만 이미지 빌드·푸시·스캔
      # ──────────────────────────────────────────────────────────────────
      - name: Log in to GHCR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build image (local only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          # ✅ Buildpacks가 `org.opencontainers.image.source` 라벨 자동 생성
          BP_OCI_SOURCE: https://github.com/${{ github.repository }}
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Tag latest & push both tags
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # 1) SHA → latest 태그 복사
          docker tag ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
                     ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:latest

          # 2) 두 태그를 한 번에 푸시
          docker push --all-tags ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}

      - name: Scan image (Anchore / Grype)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: anchore/scan-action@v3
        id: img-scan
        with:
          image: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false
          severity-cutoff: high

      - name: Upload SARIF (image)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.img-scan.outputs.sarif }}
          category: anchore-image         # ✅ category 다르게
