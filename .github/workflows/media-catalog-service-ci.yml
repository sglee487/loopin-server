name: Media Catalog Service CI

on:
  push:
    branches: [ '**' ]
    paths: [ 'media-catalog-service/**' ]
  pull_request:
    paths: [ 'media-catalog-service/**' ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  OWNER: sglee487
  DEPLOY_REPO: loopin-server
  IMAGE_NAME: loopin-server/media-catalog-service
  APP_REPO: catalog-service
  VERSION: ${{ github.sha }}

jobs:
  ########################################################################
  # 1) BUILD + TEST
  ########################################################################
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    defaults:
      run:
        working-directory: media-catalog-service
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Build, unit tests and integration tests
        run: |
          chmod +x gradlew
          ./gradlew build

      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}/media-catalog-service"
          fail-build: false
          severity-cutoff: high

      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  ########################################################################
  # 2) PACKAGE + PUBLISH (main 브랜치 push 일 때만)
  ########################################################################
  package:
    name: Package and Publish
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ build ]
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write        # ★ GHCR에 푸시하려면 필요
      security-events: write
    defaults:
      run:
        working-directory: media-catalog-service
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      # 1) GHCR 로그인 (GITHUB_TOKEN)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 2) Build image (로컬)
      - name: Build container image
        env:
          # 선택: 레포소스 라벨 → GHCR가 레포 자동 연결 (GITHUB_TOKEN 만으로도 연결됨)
          BP_OCI_LABELS: "org.opencontainers.image.source=https://github.com/${{ github.repository }}"
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      # 3) 취약점 스캔
      - uses: anchore/scan-action@v3
        id: scan
        with:
          image: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false
          severity-cutoff: high

      - uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      # 4) Push tags (해시, latest)
      - name: Push image tags
        run: |
          docker push ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

          docker tag ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
                    ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:latest
          docker push ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:latest

  ########################################################################
  # 3) FUNCTIONAL TESTS
  ########################################################################
  functional:
    name: Functional Acceptance Tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ package ]
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Running functional acceptance tests for Media Catalog Service"

  ########################################################################
  # 4) PERFORMANCE TESTS
  ########################################################################
  performance:
    name: Performance Tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ package ]
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Running performance tests for Media Catalog Service"

  ########################################################################
  # 5) SECURITY TESTS
  ########################################################################
  security:
    name: Security Tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ package ]
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Running security tests for Media Catalog Service"

  ########################################################################
  # 6) DELIVER
  ########################################################################
  deliver:
    name: Deliver release candidate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ functional, performance, security ]
    runs-on: ubuntu-22.04
    steps:
      - name: Deliver application to production
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DISPATCH_TOKEN }}
          repository: ${{ env.OWNER }}/${{ env.DEPLOY_REPO }}
          event-type: app_delivery
          client-payload: |
            {
              "app_image": "${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.DEPLOY_REPO }}",
              "app_name": "${{ env.APP_REPO }}",
              "app_version": "${{ env.VERSION }}"
            }
