server:
  port: ${SERVER_PORT:59000}
  reactive:
    session:
      cookie:
        same-site: none
        secure: true
        max-age: 365d

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:11420}

loopin:
  redirect-url: ${REDIRECT_URL:http://localhost:11420}

spring:
  application:
    name: gateway-service
  config:
    import: "optional:kubernetes:"
  cloud:
    gateway:
      server:
        webflux:
          #          httpclient:
          #            connect-timeout: 2000
          #            response-timeout: 5s
          #            pool:
          #              max-life-time: 60s
          #              max-idle-time: 15s
          #              type: elastic
          routes:
            - id: playback-route
              uri: ${PLAYBACK_SERVICE_URL:http://localhost:59002}
              predicates:
                - Path=/api/v1/user-play-session/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: playbackCircuitBreaker
                    fallbackUri: forward:/playback-fallback
            - id: media-catalog-route
              uri: ${MEDIA_CATALOG_SERVICE_URL:http://localhost:59001}
              predicates:
                - Path=/api/v1/playlists/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: mediaCatalogCircuitBreaker
                    fallbackUri: forward:/media-catalog-fallback
          default-filters:
            - SaveSession
            - TokenRelay
            - name: Retry
              args:
                retries: 3
                methods: GET
                series: SERVER_ERROR
                exceptions: java.io.IOException, java.util.concurrent.TimeoutException
                backoff:
                  firstBackoff: 50ms
                  maxBackOff: 500ms
                  factor: 2
                  basedOnPreviousValue: false
  session:
    timeout: 365d
    redis:
      namespace: loopin:gateway
  security:
    oauth2:
      client:
        registration:
          keycloak:
            #            provider: keycloak
            client-id: gateway-service
            client-secret: keycloak-client-secret
            #            authorization-grant-type: authorization_code
            #            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid,roles
        provider:
          keycloak:
            # issuer-uri 지움!
            issuer-uri: ${ISSUER_URI:http://localhost:59022/realms/loopin}
  #            authorization-uri: http://localhost:59022/realms/loopin/protocol/openid-connect/auth
  #            token-uri:        http://localhost:59022/realms/loopin/protocol/openid-connect/token
  #            jwk-set-uri:      http://localhost:59022/realms/loopin/protocol/openid-connect/certs
  #            user-info-uri:    http://localhost:59022/realms/loopin/protocol/openid-connect/userinfo

  data:
    redis:
      connect-timeout: 2s
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 1s

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
    instances:
      mediaCatalogCircuitBreaker:
        timeoutDuration: 60s
        cancelRunningFuture: false
logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  level:
    circuitbreaker: info
    org.springframework.security: debug
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, gateway, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,redis
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}